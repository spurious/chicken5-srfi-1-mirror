;; srfi-1 -*- Scheme -*-

(alist-cons (forall (a b c) (#(procedure #:clean) alist-cons (a b (list-of c)) (pair a (pair b (list-of c))))))
(alist-copy (forall (a) (#(procedure #:clean #:enforce) alist-copy ((list-of a)) (list-of a))))
(alist-delete (forall (a b) (#(procedure #:enforce) alist-delete (a (list-of b) #!optional (procedure (a b) *)) list)))
(alist-delete! (forall (a b) (#(procedure #:enforce) alist-delete! (a (list-of b) #!optional (procedure (a b) *)) undefined)))
(any (forall (a) (#(procedure #:enforce) any ((procedure (a #!rest) *) (list-of a) #!rest list) *)))
(append! (#(procedure #:enforce) append! (#!rest list) list))

(append-map
 (forall (a b) (#(procedure #:enforce) append-map ((procedure (a #!rest) (list-of b)) (list-of a) #!rest list)
			   (list-of b))))

(append-map!
 (forall (a b) (#(procedure #:enforce) append-map! ((procedure (a #!rest) (list-of b)) (list-of a) #!rest list)
			   (list-of b))))

(append-reverse (#(procedure #:clean #:enforce) append-reverse (list list) list))
(append-reverse! (#(procedure #:enforce) append-reverse! (list list) list))
(break (forall (a) (#(procedure #:enforce) break ((procedure (a) *) (list-of a)) (list-of a) (list-of a))))
(break! (forall (a) (#(procedure #:enforce) break! ((procedure (a) *) (list-of a)) (list-of a) (list-of a))))
(car+cdr (forall (a b) (#(procedure #:clean #:enforce) car+cdr ((pair a b)) a b)))
(circular-list (#(procedure #:clean) circular-list (#!rest) list))

(circular-list? (#(procedure #:clean #:foldable) circular-list? (*) boolean)
		((null) (let ((#(tmp) #(1))) '#f)))

(concatenate (#(procedure #:clean #:enforce) concatenate ((list-of list)) list))
(concatenate! (#(procedure #:enforce) concatenate! ((list-of list)) list))
(cons* (forall (a) (#(procedure #:clean) cons* (a #!rest) (pair a *))))
(count (forall (a) (#(procedure #:enforce) count ((procedure (a #!rest) *) (list-of a) #!rest list) fixnum)))
(delete (forall (a b) (#(procedure #:enforce) delete (a (list-of b) #!optional (procedure (a *) *)) (list-of b))))
(delete! (forall (a b) (#(procedure #:enforce) delete! (a (list-of b) #!optional (procedure (a *) *)) (list-of b))))

(delete-duplicates
 (forall (a) (#(procedure #:enforce) delete-duplicates ((list-of a) #!optional (procedure (a *) *)) (list-of a))))

(delete-duplicates!
 (forall (a) (#(procedure #:enforce) delete-duplicates! ((list-of a) #!optional (procedure (a *) *)) (list-of a))))

(dotted-list? (#(procedure #:clean #:foldable) dotted-list? (*) boolean))
(drop (forall (a) (#(procedure #:enforce) drop ((list-of a) fixnum) (list-of a))))
(drop-right (forall (a) (#(procedure #:enforce) drop-right ((list-of a) fixnum) (list-of a))))
(drop-right! (forall (a) (#(procedure #:enforce) drop-right! ((list-of a) fixnum) (list-of a))))
(drop-while (forall (a) (#(procedure #:enforce) drop-while ((procedure (a) *) (list-of a)) (list-of a))))
(eighth (#(procedure #:clean #:enforce #:foldable) eighth (pair) *))

(every
 (forall (a) (#(procedure #:enforce) every ((procedure (a #!rest) *) (list-of a) #!rest list) *)))

(fifth (#(procedure #:clean #:enforce #:foldable) fifth (pair) *))
(filter (forall (a) (#(procedure #:enforce) filter ((procedure (a) *) (list-of a)) (list-of a))))
(filter! (forall (a) (#(procedure #:enforce) filter! ((procedure (a) *) (list-of a)) (list-of a))))

(filter-map
 (forall (a b) (#(procedure #:enforce) filter-map ((procedure (a #!rest) b) (list-of a) #!rest list) (list-of b))))

(find (forall (a) (#(procedure #:enforce) find ((procedure (a) *) (list-of a)) *)))
(find-tail (forall (a) (#(procedure #:enforce) find-tail ((procedure (a) *) (list-of a)) *)))

(first (forall (a) (#(procedure #:clean #:enforce #:foldable) first ((pair a *)) a))
       ((pair) (##core#inline "C_u_i_car" #(1))))

(fold (#(procedure #:enforce) fold ((procedure (* #!rest) *) * #!rest list) *)) ;XXX
(fold-right (#(procedure #:enforce) fold-right ((procedure (* #!rest) *) * #!rest list) *)) ;XXX

(fourth (forall (a) (#(procedure #:clean #:enforce #:foldable) fourth ((pair * (pair * (pair * (pair a *))))) a))
	(((pair * (pair * (pair * (pair * *)))))
	 (##core#inline "C_u_i_car" 
			(##core#inline "C_u_i_cdr"
				       (##core#inline "C_u_i_cdr"
						      (##core#inline "C_u_i_cdr" #(1)))))))

(iota (#(procedure #:clean #:enforce) iota (fixnum #!optional fixnum fixnum) (list-of number)))
(last (#(procedure #:clean #:enforce #:foldable) last (pair) *))
(last-pair (#(procedure #:clean #:enforce #:foldable) last-pair (pair) *))
(length+ (#(procedure #:clean #:enforce #:foldable) length+ (list) *))
(list-copy (forall (a) (#(procedure #:pure) list-copy (a) a)))
(list-index (forall (a) (#(procedure #:enforce) list-index ((procedure (a #!rest) *) (list-of a) #!rest list) *)))
(list-tabulate (forall (a) (#(procedure #:enforce) list-tabulate (fixnum (procedure (fixnum) a)) (list-of a))))
(list= (#(procedure #:clean #:enforce) list= (#!optional (procedure (list list) *) #!rest list) boolean)
       (() '#t)
       ((procedure) (let ((#(tmp) #(1))) '#t)))

(lset-adjoin 
 (forall (a) (#(procedure #:enforce) lset-adjoin ((procedure (a a) *) (list-of a) #!rest a) (list-of a)))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-diff+intersection
 (forall (a)
	 (#(procedure #:enforce) lset-diff+intersection ((procedure (a a) *) (list-of a) #!rest (list-of a))
		     (list-of a) (list-of a)))
 ((procedure list) (let ((#(tmp) #(1))) (##sys#values #(2) '()))))

(lset-diff+intersection! 
 (forall (a)
	 (#(procedure #:enforce) lset-diff+intersection! ((procedure (a a) *) (list-of a) #!rest (list-of a))
		     (list-of a) (list-of a)))
 ((procedure list) (let ((#(tmp) #(1))) (##sys#values #(2) '()))))

(lset-difference
 (forall (a) (#(procedure #:enforce) lset-difference ((procedure (a a) *) (list-of a) #!rest (list-of a)) (list-of a)))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-difference!
 (forall (a) (#(procedure #:enforce) lset-difference! ((procedure (a a) *) (list-of a) #!rest (list-of a)) (list-of a)))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-intersection
 (forall (a) (#(procedure #:enforce) lset-intersection ((procedure (a a) *) (list-of a) #!rest (list-of a)) (list-of a)))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-intersection!
 (forall (a) (#(procedure #:enforce) lset-intersection! ((procedure (a a) *) (list-of a) #!rest (list-of a)) (list-of a)))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-union
 (forall (a) (#(procedure #:enforce) lset-union ((procedure (a a) *) #!rest (list-of a)) (list-of a)))
 ((procedure) (let ((#(tmp) #(1))) '()))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-union!
 (forall (a) (#(procedure #:enforce) lset-union! ((procedure (a a) *) #!rest (list-of a)) (list-of a)))
 ((procedure) (let ((#(tmp) #(1))) '()))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-xor
 (forall (a) (#(procedure #:enforce) lset-xor ((procedure (a a) *) #!rest (list-of a)) (list-of a)))
 ((procedure) (let ((#(tmp) #(1))) '()))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset-xor!
 (forall (a) (#(procedure #:enforce) lset-xor! ((procedure (a a) *) #!rest (list-of a)) (list-of a)))
 ((procedure) (let ((#(tmp) #(1))) '()))
 ((procedure list) (let ((#(tmp) #(1))) #(2))))

(lset<=
 (forall (a) (#(procedure #:enforce) lset<= ((procedure (a a) *) #!rest (list-of a)) boolean))
 ((procedure) (let ((#(tmp) #(1))) '#t))
 ((procedure list) (let ((#(tmp1) #(1)) (#(tmp2) #(2))) '#t)))

(lset=
 (forall (a) (#(procedure #:enforce) lset= ((procedure (a a) *) #!rest (list-of a)) boolean))
 ((procedure) (let ((#(tmp) #(1))) '#t))
 ((procedure list) (let ((#(tmp1) #(1)) (#(tmp2) #(2))) '#t)))

(make-list (forall (a) (#(procedure #:clean #:enforce) make-list (fixnum #!optional a) (list-of a))))

(map!
 (forall (a b) (#(procedure #:enforce) map! ((procedure (a #!rest) b) (list-of a) #!rest list) (list-of b))))

(map-in-order
 (forall 
  (a b)
  (#(procedure #:enforce) map-in-order ((procedure (a #!rest) b) (list-of a) #!rest list) (list-of b))))

(ninth (#(procedure #:clean #:enforce #:foldable) ninth (pair) *))

(not-pair? (#(procedure #:clean #:foldable) not-pair? (*) boolean)
	   ((pair) (let ((#(tmp) #(1))) '#f))
	   (((not (or pair list))) (let ((#(tmp) #(1))) '#t)))

(null-list? (#(procedure #:clean #:enforce #:foldable) null-list? (list) boolean)
	    ((pair) (let ((#(tmp) #(1))) '#f))
	    ((list) (let ((#(tmp) #(1))) '#f))
	    ((null) (let ((#(tmp) #(1))) '#t)))

(pair-fold (#(procedure #:enforce) pair-fold (procedure * list #!rest list) *)) ;XXX do this
(pair-fold-right (#(procedure #:enforce) pair-fold-right (procedure * list #!rest list) *)) ;XXX
(pair-for-each (#(procedure #:enforce) pair-for-each ((procedure (#!rest) . *) list #!rest list) undefined)) ;XXX
(partition (forall (a) (#(procedure #:enforce) partition ((procedure (a) *) (list-of a)) (list-of a) (list-of a))))
(partition! (forall (a) (#(procedure #:enforce) partition! ((procedure (a) *) (list-of a)) (list-of a) (list-of a))))

(proper-list? (#(procedure #:clean #:foldable) proper-list? (*) boolean)
	      ((null) (let ((#(tmp) #(1))) '#t)))

(reduce (#(procedure #:enforce) reduce ((procedure (* *) *) * list) *)) ;XXX
(reduce-right (#(procedure #:enforce) reduce-right ((procedure (* *) *) * list) *)) ;XXX
(remove (forall (a) (#(procedure #:enforce) remove ((procedure (a) *) (list-of a)) (list-of a))))
(remove! (forall (a) (#(procedure #:enforce) remove! ((procedure (a) *) (list-of a)) (list-of a))))
(reverse! (forall (a) (#(procedure #:enforce) reverse! ((list-of a)) (list-of a))))

(second (forall (a) (#(procedure #:clean #:enforce #:foldable) second ((pair * (pair a *))) a))
	(((pair * (pair * *))) (##core#inline "C_u_i_car" (##core#inline "C_u_i_cdr" #(1)))))

(seventh (#(procedure #:clean #:enforce #:foldable) seventh (pair) *))
(sixth (#(procedure #:clean #:enforce #:foldable) sixth (pair) *))
(span (forall (a) (#(procedure #:enforce) span ((procedure (a) *) (list-of a)) (list-of a) (list-of a))))
(span! (forall (a) (#(procedure #:enforce) span! ((procedure (a) *) (list-of a)) (list-of a) (list-of a))))
(split-at (forall (a) (#(procedure #:enforce) split-at ((list-of a) fixnum) (list-of a) (list-of a))))
(split-at! (forall (a) (#(procedure #:enforce) split-at! ((list-of a) fixnum) (list-of a) (list-of a))))
(take (forall (a) (#(procedure #:enforce) take ((list-of a) fixnum) (list-of a))))
(take! (forall (a) (#(procedure #:enforce) take! ((list-of a) fixnum) (list-of a))))
(take-right (forall (a) (#(procedure #:enforce) take-right ((list-of a) fixnum) (list-of a))))
(take-while (forall (a) (#(procedure #:enforce) take-while ((procedure (a) *) (list-of a)) (list-of a))))
(take-while! (forall (a) (#(procedure #:enforce) take-while! ((procedure (a) *) (list-of a)) (list-of a))))
(tenth (#(procedure #:clean #:enforce #:foldable) tenth (pair) *))

(third (forall (a) (#(procedure #:clean #:enforce #:foldable) third ((pair * (pair * (pair a *)))) a))
       (((pair * (pair * (pair * *))))
	(##core#inline "C_u_i_car" 
		       (##core#inline "C_u_i_cdr" (##core#inline "C_u_i_cdr" #(1))))))

(unfold (#(procedure #:enforce) unfold ((procedure (*) *) (procedure (*) *) (procedure (*) *) * #!optional (procedure (*) *)) *)) ;XXX
(unfold-right (#(procedure #:enforce) unfold-right ((procedure (*) *) (procedure (*) *) (procedure (*) *) * #!optional (procedure (*) *)) *)) ;XXX
(unzip1 (forall (a) (#(procedure #:clean #:enforce) unzip1 ((list-of (pair a *))) (list-of a))))
(unzip2 (forall (a b) (#(procedure #:clean #:enforce) unzip2 ((list-of (pair a (pair b *)))) (list-of a) (list-of b))))

(unzip3
 (forall (a b c) (#(procedure #:clean #:enforce) unzip3 ((list-of (pair a (pair b (pair c *))))) (list-of a) (list-of b) (list-of c))))

(unzip4 (#(procedure #:clean #:enforce) unzip4 (list) list list list list)) ; yeah
(unzip5 (#(procedure #:clean #:enforce) unzip5 (list) list list list list list)) ; yeah, too
(xcons (forall (a b) (#(procedure #:pure) xcons (a b) (pair b a))))
(zip (forall (a) (#(procedure #:clean #:enforce) zip ((list-of a) #!rest list) (list-of (pair a *)))))
